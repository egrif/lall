name: Auto Release on Version Change

# This workflow creates releases automatically when pushed to main.
# It relies on the "Tests" workflow for quality gates (tests, security, linting).
# Only runs build/release steps if version checks pass.

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.current-version.outputs.version }}
      tag-exists: ${{ steps.check-tag.outputs.exists }}
      release-exists: ${{ steps.check-release.outputs.exists }}
      should-proceed: ${{ steps.should-proceed.outputs.result }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract current version
      id: current-version
      run: |
        CURRENT_VERSION=$(grep "VERSION = " lib/lall/version.rb | sed "s/.*VERSION = '\([^']*\)'.*/\1/")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Check if tag already exists
      id: check-tag
      run: |
        TAG_NAME="v${{ steps.current-version.outputs.version }}"
        if git tag -l | grep -q "^$TAG_NAME$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag $TAG_NAME already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag $TAG_NAME does not exist, will create it"
        fi

    - name: Check if release already exists
      id: check-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="v${{ steps.current-version.outputs.version }}"
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release $TAG_NAME already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release $TAG_NAME does not exist, will create it"
        fi

    - name: Determine if we should proceed
      id: should-proceed
      run: |
        TAG_EXISTS="${{ steps.check-tag.outputs.exists }}"
        RELEASE_EXISTS="${{ steps.check-release.outputs.exists }}"
        
        if [[ "$TAG_EXISTS" == "false" || "$RELEASE_EXISTS" == "false" ]]; then
          echo "result=true" >> $GITHUB_OUTPUT
          echo "Will proceed with tag/release creation (tag exists: $TAG_EXISTS, release exists: $RELEASE_EXISTS)"
        else
          echo "result=false" >> $GITHUB_OUTPUT
          echo "Both tag and release already exist, skipping"
        fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should-proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      gem-name: ${{ steps.build-gem.outputs.gem-name }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: false

    - name: Configure bundler and install dependencies
      run: |
        bundle config set frozen false
        bundle config set deployment false
        bundle install

    - name: Build gem
      id: build-gem
      run: |
        GEM_NAME=$(gem build lall.gemspec | grep "Successfully built" | awk '{print $4}')
        echo "gem-name=$GEM_NAME" >> $GITHUB_OUTPUT
        echo "Built gem: $GEM_NAME"

    - name: Upload gem artifact
      uses: actions/upload-artifact@v4
      with:
        name: gem-package
        path: "*.gem"
        retention-days: 5

  create-tag-and-release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should-proceed == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract commit message
      id: commit-info
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        echo "message<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create and push tag
      if: needs.check-version.outputs.tag-exists == 'false'
      run: |
        TAG_NAME="v${{ needs.check-version.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create annotated tag with the commit message
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME" -m "${{ steps.commit-info.outputs.message }}"
        git push origin "$TAG_NAME"
        
        echo "Created and pushed tag: $TAG_NAME"

    - name: Download gem artifact
      uses: actions/download-artifact@v4
      with:
        name: gem-package

    - name: Create GitHub Release
      if: needs.check-version.outputs.release-exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="v${{ needs.check-version.outputs.version }}"
        GEM_FILE=$(ls *.gem)
        
        RELEASE_BODY=$(cat << 'EOF'
        ${{ steps.commit-info.outputs.message }}
        
        ## Installation
        
        ### From GitHub Packages
        ```bash
        gem install lall --source "https://rubygems.pkg.github.com/egrif"
        ```
        
        ### From RubyGems.org (after manual publish)
        ```bash
        gem install lall
        ```
        
        ## Usage
        
        ```bash
        lall -s STRING [-e ENV[,ENV2,...]] [-g GROUP] [OPTIONS]
        ```
        
        See [README.md](README.md) for complete documentation and [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        EOF
        )
        
        gh release create "$TAG_NAME" \
          --title "Release $TAG_NAME" \
          --notes "$RELEASE_BODY" \
          --latest \
          "$GEM_FILE"

  publish-github:
    needs: [check-version, build, create-tag-and-release]
    if: needs.check-version.outputs.should-proceed == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: false

    - name: Configure bundler and install dependencies
      run: |
        bundle config set frozen false
        bundle config set deployment false
        bundle install

    - name: Download gem artifact
      uses: actions/download-artifact@v4
      with:
        name: gem-package

    - name: Configure GitHub Packages
      run: |
        mkdir -p ~/.gem
        cat << EOF > ~/.gem/credentials
        ---
        :github: Bearer ${{ secrets.GITHUB_TOKEN }}
        EOF
        chmod 0600 ~/.gem/credentials

    - name: Publish to GitHub Packages
      run: |
        GEM_NAME=$(ls *.gem)
        gem push --key github --host https://rubygems.pkg.github.com/${{ github.repository_owner }} $GEM_NAME
        echo "Published $GEM_NAME to GitHub Packages"
