module Lotus
  class EntitySet
    attr_reader :entities, :settings

    def initialize(entities = [], settings = nil)
      @entities = entities
      @settings = settings
    end

    # Class method to create an EntitySet from settings
    # Instantiates all environments from groups defined in settings
    def self.from_settings(settings)
      environments = []
      cache_manager = initialize_cache_manager(settings)
      
      # Get all environments from groups in settings
      settings.groups.each do |_group_name, environment_names|
        environment_names.each do |env_name|
          # Skip duplicates - same environment might be in multiple groups
          next if environments.any? { |env| env.name == env_name }
          
          # Create Environment instance with cache manager
          environment = Lotus::Environment.new(
            env_name,
            cache_manager: cache_manager
          )
          environments << environment
        end
      end
      
      # Return new EntitySet with environments and settings
      new(environments, settings)
    end

    def add(entity)
      @entities << entity
    end

    def remove(entity)
      @entities.delete(entity)
    end

    def find_by_id(id)
      @entities.find { |entity| entity.id == id }
    end

    def find_by_name(name)
      @entities.find { |entity| entity.name == name }
    end

    def all
      @entities
    end

    # Get all unique group names that environments belong to
    def group_names
      return [] unless @settings
      
      groups = []
      @settings.groups.each do |group_name, environment_names|
        @entities.each do |entity|
          if environment_names.include?(entity.name)
            groups << group_name unless groups.include?(group_name)
          end
        end
      end
      groups
    end

    private

    def self.initialize_cache_manager(settings)
      cache_settings = settings.cache_settings
      
      if cache_settings[:enabled]
        require_relative '../lall/cache_manager'
        Lall::CacheManager.new(cache_settings)
      else
        # Return a null cache manager if caching is disabled
        require_relative '../lall/cli'
        LallCLI::NullCacheManager.new
      end
    end
  end
end